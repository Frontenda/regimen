// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(chai, utils) {
    chai.Assertion.addProperty("avatar", function() {
      var block;
      block = this._obj;
      if (block.author != null) {
        utils.flag(this, "block.pathValue", "author.avatar");
        return this.assert(block.author.avatar != null, "expected block " + block.id + " author to have an avatar", "expected block " + block.id + " author to not have an avatar");
      }
    });
    chai.Assertion.addProperty("description", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "description");
      return this.assert(block.description != null, "expected block " + block.id + " to have a description", "expected block " + block.id + " to not have a description");
    });
    chai.Assertion.addProperty("domain", function() {
      var block;
      block = this._obj;
      if (block.publisher != null) {
        utils.flag(this, "block.pathValue", "publisher.domain");
        return this.assert(block.publisher.domain != null, "expected block " + block.id + " publisher to have a domain", "expected block " + block.id + " publisher to not have a domain");
      }
    });
    chai.Assertion.addProperty("favicon", function() {
      var block;
      block = this._obj;
      if (block.publisher != null) {
        utils.flag(this, "block.pathValue", "publisher.favicon");
        return this.assert(block.publisher.favicon != null, "expected block " + block.id + " publisher to have a favicon", "expected block " + block.id + " publisher to not have a favicon");
      }
    });
    chai.Assertion.addProperty("height", function() {
      var block;
      block = this._obj;
      if (block.cover != null) {
        utils.flag(this, "block.pathValue", "cover.height");
        return this.assert(block.cover.height != null, "expected block " + block.id + " cover to have a height", "expected block " + block.id + " cover to not have a height");
      }
    });
    chai.Assertion.addProperty("html", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "html");
      return this.assert(block.html != null, "expected block " + block.id + " to have a html", "expected block " + block.id + " to not have a html");
    });
    chai.Assertion.addProperty("maybe", function() {
      return utils.flag(this, "block.maybe", true);
    });
    chai.Assertion.addProperty("name", function() {
      var block;
      block = this._obj;
      if (block.author != null) {
        utils.flag(this, "block.pathValue", "author.name");
        return this.assert(block.author.name != null, "expected block " + block.id + " author to have a name", "expected block " + block.id + " author to not have a name");
      } else if (block.publisher != null) {
        utils.flag(this, "block.pathValue", "publisher.name");
        return this.assert(block.publisher.name != null, "expected block " + block.id + " publisher to have a name", "expected block " + block.id + " publisher to not have a name");
      }
    });
    chai.Assertion.addProperty("src", function() {
      var block;
      block = this._obj;
      if (block.cover != null) {
        utils.flag(this, "block.pathValue", "cover.src");
        return this.assert(block.cover.src != null, "expected block " + block.id + " cover to have a src", "expected block " + block.id + " cover to not have a src");
      }
    });
    chai.Assertion.addProperty("title", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "title");
      return this.assert(block.title != null, "expected block " + block.id + " to have a title", "expected block " + block.id + " to not have a title");
    });
    chai.Assertion.addProperty("subtitle", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "subtitle");
      return this.assert(block.subtitle != null, "expected block " + block.id + " to have a subtitle", "expected block " + block.id + " to not have a subtitle");
    });
    chai.Assertion.addProperty("url", function() {
      var block;
      block = this._obj;
      if (block.author != null) {
        utils.flag(this, "block.pathValue", "author.url");
        return this.assert(block.author.url != null, "expected block " + block.id + " author to have a url", "expected block " + block.id + " author to not have a url");
      } else if (block.publisher != null) {
        utils.flag(this, "block.pathValue", "publisher.url");
        return this.assert(block.publisher.url != null, "expected block " + block.id + " publisher to have a url", "expected block " + block.id + " publisher to not have a url");
      }
    });
    return chai.Assertion.addProperty("width", function() {
      var block;
      block = this._obj;
      if (block.cover != null) {
        utils.flag(this, "block.pathValue", "cover.width");
        return this.assert(block.cover.width != null, "expected block " + block.id + " cover to have a width", "expected block " + block.id + " cover to not have a width");
      }
    });
  };

}).call(this);
