// Generated by CoffeeScript 1.9.2
(function() {
  var _overwriteMethod;

  _overwriteMethod = function(chai, utils, preposition, actualPath) {
    return function(_super) {
      return function(expected) {
        var actual, block, e, negated, path, result, target;
        block = this._obj;
        path = utils.flag(this, "block.pathValue");
        if (path != null) {
          target = utils.getPathValue(path, block);
        }
        if (target != null) {
          negated = utils.flag(this, "negate");
          utils.flag(this, "object", target);
          actual = target;
          if (actualPath != null) {
            actual = utils.getPathValue(actualPath, target);
          }
          try {
            _super.apply(this, arguments);
            result = true;
          } catch (_error) {
            e = _error;
            result = false;
          }
          return this.assert(negated ? !result : result, "expected block " + block.id + " to have a " + path + " " + preposition + " \#{exp} but got \#{act}", "expected block " + block.id + " to not have a " + path + " " + preposition + " \#{exp} but got \#{act}", expected, actual);
        } else {
          return _super.apply(this, arguments);
        }
      };
    };
  };

  module.exports = function(chai, utils) {
    var overwrite;
    return overwrite = {
      method: function(name, preposition, path) {
        var method;
        method = _overwriteMethod(chai, utils, preposition, path);
        return chai.Assertion.overwriteMethod(name, method);
      },
      chainableMethod: function(name, preposition, path) {
        var method, property;
        method = _overwriteMethod(chai, utils, preposition, path);
        property = function(_super) {
          return _super;
        };
        return chai.Assertion.overwriteChainableMethod(name, method, property);
      }
    };
  };

}).call(this);
