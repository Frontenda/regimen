// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(chai, utils) {
    var addOrientationMethod;
    addOrientationMethod = function(name) {
      return chai.Assertion.addMethod(name, function(orientation) {
        var actual, block, expected;
        block = this._obj;
        if (orientation != null) {
          expected = orientation;
          actual = block.cover.orientation;
          return this.assert(expected === actual, "expected block " + block.id + " to have a cover with \#{exp} orientation but got \#{act}", "expected block " + block.id + " to have a cover without \#{exp} orientation but got \#{act}", expected, actual);
        } else {
          return this.assert(block.cover.orientation != null, "expected block " + block.id + " to have a cover with an orientation", "expected block " + block.id + " to have a cover without an orientation");
        }
      });
    };
    addOrientationMethod("orientation");
    addOrientationMethod("oriented");
    chai.Assertion.addProperty("src", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "cover.src");
      return this.assert(block.cover.src != null, "expected block " + block.id + " cover to have a src", "expected block " + block.id + " cover to not have a src");
    });
    chai.Assertion.addProperty("width", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "cover.width");
      return this.assert(block.cover.width != null, "expected block " + block.id + " cover to have a width", "expected block " + block.id + " cover to not have a width");
    });
    return chai.Assertion.addProperty("height", function() {
      var block;
      block = this._obj;
      utils.flag(this, "block.pathValue", "cover.height");
      return this.assert(block.cover.height != null, "expected block " + block.id + " cover to have a height", "expected block " + block.id + " cover to not have a height");
    });
  };

}).call(this);
