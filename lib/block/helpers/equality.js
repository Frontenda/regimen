// Generated by CoffeeScript 1.9.2
(function() {
  module.exports = function(chai, utils) {
    var _overwriteMethod, overwriteDeepEqualMethod, overwriteEqualMethod, overwriteMethod;
    _overwriteMethod = function(preposition) {
      return function(_super) {
        return function(expected) {
          var actual, block, e, negated, property, propertyName, result;
          block = this._obj;
          propertyName = utils.flag(this, "block.propertyName");
          property = block[propertyName];
          if (property != null) {
            negated = utils.flag(this, "negate");
            actual = property;
            utils.flag(this, "object", actual);
            try {
              _super.apply(this, arguments);
              result = true;
            } catch (_error) {
              e = _error;
              result = false;
            }
            return this.assert(negated ? !result : result, "expected block " + block.id + " to have a " + propertyName + " " + preposition + " \#{exp} but got \#{act}", "expected block " + block.id + " to not have a " + propertyName + " " + preposition + " \#{exp} but got \#{act}", expected, actual);
          } else {
            return _super.apply(this, arguments);
          }
        };
      };
    };
    overwriteMethod = function(name, preposition) {
      var method;
      method = _overwriteMethod(preposition);
      return chai.Assertion.overwriteMethod(name, method);
    };
    overwriteEqualMethod = function(name) {
      return overwriteMethod(name, "equal to");
    };
    overwriteDeepEqualMethod = function(name) {
      return overwriteMethod(name, "deeply equal to");
    };
    overwriteEqualMethod("equal");
    overwriteEqualMethod("equals");
    overwriteEqualMethod("eq");
    overwriteDeepEqualMethod("eql");
    return overwriteDeepEqualMethod("eqls");
  };

}).call(this);
